C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Objects\led.obj
COMPILER INVOKED BY: E:\Keil\c51\C51\BIN\C51.EXE sys\led.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -led.lst) TABS(2) OBJECT(.\Objects\led.obj)

line level    source

   1          #include "sys.h"
   2          #include "led.h"
   3          
   4          //LCD的画笔颜色和背景色    
   5          extern u16  POINT_COLOR=WHITE;  //画笔颜色
   6          extern u16  BACK_COLOR=BLACK;  //背景色 
   7          
   8          u8 size=24;
   9          
  10          
  11          //LCD重要参数集
  12          typedef struct  
  13          {                       
  14            u8 width;     //LCD 宽度
  15            u8 height;      //LCD 高度
  16            u16 id;       //LCD ID
  17            u8  dir;      //横屏还是竖屏控制：0，竖屏；1，横屏。  
  18            u16  wramcmd;   //开始写gram指令
  19            u16  setxcmd;   //设置x坐标指令
  20            u16  setycmd;   //设置y坐标指令
  21            u8   xoffset;    
  22            u8   yoffset; 
  23          }_lcd_dev;  
  24          
  25          
  26          //管理LCD重要参数
  27          //默认为竖屏
  28          _lcd_dev lcddev;
  29          
  30          //24*24 ASICII字符集点阵
  31          unsigned char code ascii_2412[27][36]={  
  32          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             -0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
  33          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x38,0x0F,0xFE,0x38,
             -0x0F,0x80,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
  34          {0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x06,0x00,0x00,0x0C,0x00,0x00,0x38,0x00,0x00,0x31,0x00,0x00,
             -0x06,0x00,0x00,0x0C,0x00,0x00,0x38,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00},/*""",2*/
  35          {0x00,0x00,0x00,0x00,0x61,0x80,0x00,0x67,0xF8,0x07,0xF9,0x80,0x00,0x61,0x80,0x00,0x61,0x80,0x00,0x61,0x80,
             -0x00,0x61,0x80,0x00,0x67,0xF8,0x07,0xF9,0x80,0x00,0x61,0x80,0x00,0x00,0x00},/*"#",3*/
  36          {0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0xE0,0x03,0xE0,0xF0,0x06,0x30,0x08,0x04,0x18,0x08,0x1F,0xFF,0xFE,
             -0x04,0x0E,0x08,0x07,0x87,0xF0,0x03,0x81,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*"$",4*/
  37          {0x01,0xF0,0x00,0x06,0x0C,0x00,0x04,0x04,0x08,0x06,0x0C,0x70,0x01,0xF9,0xC0,0x00,0x0E,0x00,0x00,0x3B,0xE0,
             -0x00,0xEC,0x18,0x07,0x08,0x08,0x04,0x0C,0x18,0x00,0x03,0xE0,0x00,0x00,0x00},/*"%",5*/
  38          {0x00,0x01,0xE0,0x00,0x07,0xF0,0x03,0xF8,0x18,0x04,0x1C,0x08,0x04,0x17,0x08,0x07,0xE1,0xD0,0x03,0xC0,0xE0,
             -0x00,0x23,0xB0,0x00,0x3C,0x08,0x00,0x20,0x08,0x00,0x00,0x10,0x00,0x00,0x00},/*"&",6*/
  39          {0x00,0x00,0x00,0x01,0x00,0x00,0x31,0x00,0x00,0x32,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
             -0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
  40          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x01,0xFF,0xC0,
             -0x07,0x80,0xF0,0x0C,0x00,0x18,0x10,0x00,0x04,0x20,0x00,0x02,0x00,0x00,0x00},/*"(",8*/
  41          {0x00,0x00,0x00,0x20,0x00,0x02,0x10,0x00,0x04,0x0C,0x00,0x18,0x07,0x80,0xF0,0x01,0xFF,0xC0,0x00,0x7F,0x00,
             -0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*")",9*/
  42          {0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x66,0x00,0x00,0x66,0x00,0x00,0x3C,0x00,0x00,0x18,0x00,0x03,0xFF,0xC0,
             -0x00,0x18,0x00,0x00,0x3C,0x00,0x00,0x66,0x00,0x00,0x66,0x00,0x00,0x42,0x00},/*"*",10*/
  43          {0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x01,0xFF,0xC0,
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 2   

             -0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00},/*"+",11*/
  44          {0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x31,0x00,0x00,0x32,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,
             -0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*",",12*/
  45          {0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,
             -0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00},/*"-",13*/
  46          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x38,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,
             -0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
  47          {0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x1C,0x00,0x00,0x70,0x00,0x01,0x80,0x00,0x0E,0x00,0x00,0x38,0x00,
             -0x00,0xC0,0x00,0x07,0x00,0x00,0x1C,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00},/*"/",15*/
  48          {0x00,0x00,0x00,0x00,0x7F,0x80,0x01,0xFF,0xE0,0x03,0x80,0x70,0x06,0x00,0x18,0x04,0x00,0x08,0x04,0x00,0x08,
             -0x06,0x00,0x18,0x03,0x80,0x70,0x01,0xFF,0xE0,0x00,0x7F,0x80,0x00,0x00,0x00},/*"0",16*/
  49          {0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x08,0x01,0x00,0x08,0x01,0x00,0x08,0x03,0xFF,0xF8,0x07,0xFF,0xF8,
             -0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00},/*"1",17*/
  50          {0x00,0x00,0x00,0x01,0xC0,0x38,0x02,0xC0,0x58,0x04,0x00,0x98,0x04,0x01,0x18,0x04,0x02,0x18,0x04,0x04,0x18,
             -0x06,0x1C,0x18,0x03,0xF8,0x18,0x01,0xE0,0xF8,0x00,0x00,0x00,0x00,0x00,0x00},/*"2",18*/
  51          {0x00,0x00,0x00,0x01,0xC0,0xE0,0x03,0xC0,0xF0,0x04,0x00,0x08,0x04,0x08,0x08,0x04,0x08,0x08,0x06,0x18,0x08,
             -0x03,0xF4,0x18,0x01,0xE7,0xF0,0x00,0x01,0xE0,0x00,0x00,0x00,0x00,0x00,0x00},/*"3",19*/
  52          {0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x0D,0x00,0x00,0x11,0x00,0x00,0x61,0x00,0x00,0x81,0x08,0x03,0x01,0x08,
             -0x07,0xFF,0xF8,0x0F,0xFF,0xF8,0x00,0x01,0x08,0x00,0x01,0x08,0x00,0x00,0x00},/*"4",20*/
  53          {0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0xFC,0xD0,0x06,0x08,0x08,0x06,0x10,0x08,0x06,0x10,0x08,0x06,0x10,0x08,
             -0x06,0x18,0x38,0x06,0x0F,0xF0,0x06,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00},/*"5",21*/
  54          {0x00,0x00,0x00,0x00,0x3F,0x80,0x01,0xFF,0xE0,0x03,0x84,0x30,0x02,0x08,0x18,0x04,0x10,0x08,0x04,0x10,0x08,
             -0x04,0x10,0x08,0x07,0x18,0x10,0x03,0x0F,0xF0,0x00,0x07,0xC0,0x00,0x00,0x00},/*"6",22*/
  55          {0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x07,0x00,0x00,0x06,0x00,0x00,0x06,0x00,0xF8,0x06,0x07,0xF8,
             -0x06,0x18,0x00,0x06,0xE0,0x00,0x07,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00},/*"7",23*/
  56          {0x00,0x00,0x00,0x01,0xE1,0xE0,0x03,0xF7,0xF0,0x06,0x34,0x10,0x04,0x18,0x08,0x04,0x18,0x08,0x04,0x0C,0x08,
             -0x04,0x0C,0x08,0x06,0x16,0x18,0x03,0xF3,0xF0,0x01,0xC1,0xE0,0x00,0x00,0x00},/*"8",24*/
  57          {0x00,0x00,0x00,0x00,0xF8,0x00,0x03,0xFC,0x30,0x03,0x06,0x38,0x04,0x02,0x08,0x04,0x02,0x08,0x04,0x02,0x08,
             -0x04,0x04,0x10,0x03,0x08,0xF0,0x01,0xFF,0xC0,0x00,0x7F,0x00,0x00,0x00,0x00},/*"9",25*/
  58          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x38,0x00,0x70,0x38,
             -0x00,0x70,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
  59          };     
  60          
  61          // ------------------  汉字字模的数据结构定义 ------------------------ //
  62          struct  Cn32CharTypeDef                   // 汉字字模数据结构 
  63          {
  64            unsigned char  Index[2];            // 汉字内码索引,一个汉字占两个字节  
  65            unsigned char   Msk[72];            // 点阵码数据(32*29/8) 
  66          };
  67          
  68          struct  Cn32CharTypeDef code CnChar24x24[]=
  69          {
  70          "°",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x09,0x00,0x00,0x10,0x80,0x00,0x10,0x80,0
             -x00,0x11,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0
             -x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0
             -x00,0x00,0x00,0x00,
  71          "东",0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x30,0x00,0x00,0x20,0x10,0x3F,0xFF,0xF8,0x00,0x40,0x00,0x00,0xC0,0
             -x00,0x00,0x80,0x00,0x01,0x8C,0x00,0x03,0x08,0x00,0x02,0x08,0x20,0x0F,0xFF,0xF0,0x04,0x08,0x00,0x00,0x88,0x00,0x00,0xC8,0
             -x80,0x01,0x88,0x40,0x03,0x08,0x30,0x06,0x08,0x18,0x08,0x08,0x0C,0x10,0x08,0x0C,0x20,0xC8,0x00,0x00,0x38,0x00,0x00,0x10,0
             -x00,0x00,0x00,0x00,
  72          "西",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x3F,0xFF,0xFC,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x42,0
             -x00,0x00,0x42,0x00,0x1F,0xFF,0xF8,0x08,0x42,0x18,0x08,0x42,0x18,0x08,0x42,0x18,0x08,0x42,0x18,0x08,0xC2,0x18,0x08,0x82,0
             -x18,0x08,0x82,0x18,0x09,0x03,0xF8,0x0A,0x00,0x18,0x0C,0x00,0x18,0x08,0x00,0x18,0x0F,0xFF,0xF8,0x08,0x00,0x18,0x18,0x00,0
             -x10,0x00,0x00,0x00,
  73          "南",0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x18,0x00,0x00,0x18,0x08,0x7F,0xFF,0xFC,0x00,0x10,0x00,0x00,0x10,0
             -x00,0x00,0x10,0x00,0x0F,0xFF,0xF8,0x09,0x02,0x10,0x08,0xC3,0x10,0x08,0x66,0x10,0x08,0x44,0x10,0x0B,0xFF,0x90,0x08,0x10,0
             -x10,0x08,0x10,0x10,0x0B,0xFF,0xD0,0x08,0x10,0x10,0x08,0x10,0x10,0x08,0x10,0x10,0x08,0x11,0x90,0x08,0x10,0x70,0x00,0x00,0
             -x20,0x00,0x00,0x00,
  74          "北",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0xC2,0x00,0x00,0x82,0x00,0x00,0x82,0x00,0x00,0x82,0
             -x00,0x00,0x82,0x08,0x3F,0x82,0x1C,0x00,0x82,0x30,0x00,0x82,0xC0,0x00,0x83,0x00,0x00,0x82,0x00,0x00,0x82,0x00,0x00,0x82,0
             -x00,0x00,0x82,0x00,0x00,0x82,0x00,0x03,0x82,0x04,0x1C,0x82,0x04,0x30,0x82,0x04,0x00,0xC2,0x0E,0x00,0xC3,0xFC,0x00,0x80,0
             -x00,0x00,0x00,0x00,
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 3   

  75          };
  76          /*****************************************************************************
  77           * @name       :void spi_write_byte(u8 d)
  78           * @date       :2018-08-09 
  79           * @function   :Write a byte of data using C51's Software SPI
  80           * @parameters :d:Data to be written
  81           * @retvalue   :None
  82          ******************************************************************************/
  83          void spi_write_byte(u8 d)
  84          {
  85   1        u8 val=0x80;
  86   1        while(val)
  87   1        {
  88   2          if(d&val)
  89   2          {
  90   3            LCD_SDI = 1;
  91   3          }
  92   2          else
  93   2          {
  94   3            LCD_SDI = 0;
  95   3          }
  96   2          LCD_CLK = 0;
  97   2          LCD_CLK = 1;
  98   2          val>>=1;
  99   2        }
 100   1      }
 101          
 102          /*****************************************************************************
 103           * @name       :void LCD_WR_REG(u8 data)
 104           * @date       :2018-08-09 
 105           * @function   :Write an 8-bit command to the LCD screen
 106           * @parameters :data:Command value to be written
 107           * @retvalue   :None
 108          ******************************************************************************/
 109          void LCD_WR_REG(u8 Reg)  
 110          { 
 111   1        LCD_RS=0;
 112   1        LCD_CS=0;
 113   1        spi_write_byte(Reg);
 114   1        LCD_CS=1;
 115   1      } 
 116          
 117          /*****************************************************************************
 118           * @name       :void LCD_WR_DATA(u8 data)
 119           * @date       :2018-08-09 
 120           * @function   :Write an 8-bit data to the LCD screen
 121           * @parameters :data:data value to be written
 122           * @retvalue   :None
 123          ******************************************************************************/
 124           void LCD_WR_DATA(u8 Data)
 125          {
 126   1        LCD_RS=1;
 127   1        LCD_CS=0;
 128   1        spi_write_byte(Data);
 129   1        LCD_CS=1;
 130   1      }
 131          
 132          /*****************************************************************************
 133           * @name       :void LCD_WR_DATA_16Bit(u16 Data)
 134           * @date       :2018-08-09 
 135           * @function   :Write an 16-bit command to the LCD screen
 136           * @parameters :Data:Data to be written
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 4   

 137           * @retvalue   :None
 138          ******************************************************************************/  
 139          void LCD_WR_DATA_16Bit(u16 Data)
 140          {
 141   1        LCD_CS=0;
 142   1        LCD_RS=1;
 143   1        spi_write_byte(Data>>8);
 144   1        spi_write_byte(Data);
 145   1        LCD_CS=1;
 146   1      }
 147          
 148          /*****************************************************************************
 149           * @name       :void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
 150           * @date       :2018-08-09 
 151           * @function   :Write data into registers
 152           * @parameters :LCD_Reg:Register address
 153                          LCD_RegValue:Data to be written
 154           * @retvalue   :None
 155          ******************************************************************************/
 156          void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
 157          {
 158   1        LCD_WR_REG(LCD_Reg);
 159   1        LCD_WR_DATA(LCD_RegValue);
 160   1      }
 161          
 162          /*****************************************************************************
 163           * @name       :void LCD_WriteRAM_Prepare(void)
 164           * @date       :2018-08-09 
 165           * @function   :Write GRAM
 166           * @parameters :None
 167           * @retvalue   :None
 168          ******************************************************************************/ 
 169          void LCD_WriteRAM_Prepare(void)
 170          {
 171   1        LCD_WR_REG(lcddev.wramcmd);   
 172   1      }
 173          
 174          /*****************************************************************************
 175           * @name       :void LCD_Clear(u16 Color)
 176           * @date       :2018-08-09 
 177           * @function   :Full screen filled LCD screen
 178           * @parameters :color:Filled color
 179           * @retvalue   :None
 180          ******************************************************************************/ 
 181          void LCD_Clear(u16 Color)
 182          {
 183   1        u16 i,j;
 184   1        LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1); 
 185   1        LCD_CS=0;
 186   1        LCD_RS=1;
 187   1          for(i=0;i<lcddev.width;i++)
 188   1         {
 189   2          for (j=0;j<lcddev.height;j++)
 190   2            {
 191   3              spi_write_byte(Color>>8);
 192   3              spi_write_byte(Color);
 193   3            }
 194   2      
 195   2          }
 196   1        LCD_CS=1;
 197   1      }
 198          
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 5   

 199          /*****************************************************************************
 200           * @name       :void LCD_DrawPoint(u16 x,u16 y)
 201           * @date       :2018-08-09 
 202           * @function   :Write a pixel data at a specified location
 203           * @parameters :x:the x coordinate of the pixel
 204                          y:the y coordinate of the pixel
 205           * @retvalue   :None
 206          ******************************************************************************/ 
 207          void LCD_DrawPoint(u16 x,u16 y,u16 color)
 208          {
 209   1        LCD_SetWindows(x,y,x,y);//设置光标位置 
 210   1        LCD_WR_DATA_16Bit(color);       
 211   1      }    
 212          
 213          /*****************************************************************************
 214           * @name       :void LCD_Reset(void)
 215           * @date       :2018-08-09 
 216           * @function   :Reset LCD screen
 217           * @parameters :None
 218           * @retvalue   :None
 219          ******************************************************************************/ 
 220          void LCD_Reset(void)
 221          { 
 222   1        LCD_RESET=0;
 223   1        delay_ms(20);
 224   1        LCD_RESET=1;
 225   1        delay_ms(20);
 226   1      }
 227          
 228          /*****************************************************************************
 229           * @name       :void LCD_Init(void)
 230           * @date       :2018-08-09 
 231           * @function   :Initialization LCD screen
 232           * @parameters :None
 233           * @retvalue   :None
 234          ******************************************************************************/    
 235          void LCD_Init(void)
 236          {
 237   1        LCD_Reset(); //初始化之前复位
 238   1      //************* ST7789 IPS初始化**********//  
 239   1        LCD_WR_REG(0x36); 
 240   1        LCD_WR_DATA(0x00);
 241   1      
 242   1        LCD_WR_REG(0x3A); 
 243   1        LCD_WR_DATA(0x05);
 244   1      
 245   1        LCD_WR_REG(0xB2);
 246   1        LCD_WR_DATA(0x0C);
 247   1        LCD_WR_DATA(0x0C);
 248   1        LCD_WR_DATA(0x00);
 249   1        LCD_WR_DATA(0x33);
 250   1        LCD_WR_DATA(0x33);
 251   1      
 252   1        LCD_WR_REG(0xB7); 
 253   1        LCD_WR_DATA(0x35);  
 254   1      
 255   1        LCD_WR_REG(0xBB);
 256   1        LCD_WR_DATA(0x17);
 257   1      
 258   1        LCD_WR_REG(0xC0);
 259   1        LCD_WR_DATA(0x2C);
 260   1      
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 6   

 261   1        LCD_WR_REG(0xC2);
 262   1        LCD_WR_DATA(0x01);
 263   1      
 264   1        LCD_WR_REG(0xC3);
 265   1        LCD_WR_DATA(0x12);   
 266   1      
 267   1        LCD_WR_REG(0xC4);
 268   1        LCD_WR_DATA(0x20);  
 269   1      
 270   1        LCD_WR_REG(0xC6); 
 271   1        LCD_WR_DATA(0x0F);    
 272   1      
 273   1        LCD_WR_REG(0xD0); 
 274   1        LCD_WR_DATA(0xA4);
 275   1        LCD_WR_DATA(0xA1);
 276   1      
 277   1        LCD_WR_REG(0xE0);
 278   1        LCD_WR_DATA(0xD0);
 279   1        LCD_WR_DATA(0x04);
 280   1        LCD_WR_DATA(0x0D);
 281   1        LCD_WR_DATA(0x11);
 282   1        LCD_WR_DATA(0x13);
 283   1        LCD_WR_DATA(0x2B);
 284   1        LCD_WR_DATA(0x3F);
 285   1        LCD_WR_DATA(0x54);
 286   1        LCD_WR_DATA(0x4C);
 287   1        LCD_WR_DATA(0x18);
 288   1        LCD_WR_DATA(0x0D);
 289   1        LCD_WR_DATA(0x0B);
 290   1        LCD_WR_DATA(0x1F);
 291   1        LCD_WR_DATA(0x23);
 292   1      
 293   1        LCD_WR_REG(0xE1);
 294   1        LCD_WR_DATA(0xD0);
 295   1        LCD_WR_DATA(0x04);
 296   1        LCD_WR_DATA(0x0C);
 297   1        LCD_WR_DATA(0x11);
 298   1        LCD_WR_DATA(0x13);
 299   1        LCD_WR_DATA(0x2C);
 300   1        LCD_WR_DATA(0x3F);
 301   1        LCD_WR_DATA(0x44);
 302   1        LCD_WR_DATA(0x51);
 303   1        LCD_WR_DATA(0x2F);
 304   1        LCD_WR_DATA(0x1F);
 305   1        LCD_WR_DATA(0x1F);
 306   1        LCD_WR_DATA(0x20);
 307   1        LCD_WR_DATA(0x23);
 308   1      
 309   1        LCD_WR_REG(0x21); 
 310   1      
 311   1        LCD_WR_REG(0x11); 
 312   1        //Delay (120); 
 313   1      
 314   1        LCD_WR_REG(0x29);     
 315   1      
 316   1        //设置LCD属性参数
 317   1        LCD_direction(USE_HORIZONTAL);//设置LCD显示方向 
 318   1        LCD_BL=1;//点亮背光  
 319   1      }
 320           
 321          /*****************************************************************************
 322           * @name       :void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 7   

 323           * @date       :2018-08-09 
 324           * @function   :Setting LCD display window
 325           * @parameters :xStar:the bebinning x coordinate of the LCD display window
 326                          yStar:the bebinning y coordinate of the LCD display window
 327                          xEnd:the endning x coordinate of the LCD display window
 328                          yEnd:the endning y coordinate of the LCD display window
 329           * @retvalue   :None
 330          ******************************************************************************/ 
 331          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
 332          { 
 333   1        LCD_WR_REG(lcddev.setxcmd); 
 334   1        LCD_WR_DATA((xStar+lcddev.xoffset)>>8);
 335   1        LCD_WR_DATA(xStar+lcddev.xoffset);    
 336   1        LCD_WR_DATA((xEnd+lcddev.xoffset)>>8);
 337   1        LCD_WR_DATA(xEnd+lcddev.xoffset);
 338   1      
 339   1        LCD_WR_REG(lcddev.setycmd); 
 340   1        LCD_WR_DATA((yStar+lcddev.yoffset)>>8);
 341   1        LCD_WR_DATA(yStar+lcddev.yoffset);    
 342   1        LCD_WR_DATA((yEnd+lcddev.yoffset)>>8);
 343   1        LCD_WR_DATA(yEnd+lcddev.yoffset);
 344   1      
 345   1        LCD_WriteRAM_Prepare(); //开始写入GRAM        
 346   1      }   
 347          
 348          /*****************************************************************************
 349           * @name       :void LCD_SetCursor(u16 Xpos, u16 Ypos)
 350           * @date       :2018-08-09 
 351           * @function   :Set coordinate value
 352           * @parameters :Xpos:the  x coordinate of the pixel
 353                          Ypos:the  y coordinate of the pixel
 354           * @retvalue   :None
 355          ******************************************************************************/ 
 356          void LCD_SetCursor(u16 Xpos, u16 Ypos)
 357          {               
 358   1        LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);  
 359   1      } 
 360          
 361          /*****************************************************************************
 362           * @name       :void LCD_direction(u8 direction)
 363           * @date       :2018-08-09 
 364           * @function   :Setting the display direction of LCD screen
 365           * @parameters :direction:0-0 degree
 366                                    1-90 degree
 367                                    2-180 degree
 368                                    3-270 degree
 369           * @retvalue   :None
 370          ******************************************************************************/ 
 371          void LCD_direction(u8 direction)
 372          { 
 373   1        lcddev.setxcmd=0x2A;
 374   1            lcddev.setycmd=0x2B;
 375   1            lcddev.wramcmd=0x2C;
 376   1            lcddev.dir = direction%4;
 377   1        switch(lcddev.dir){     
 378   2          case 0:                 
 379   2            lcddev.width=LCD_W;
 380   2            lcddev.height=LCD_H;  
 381   2            lcddev.xoffset=0;
 382   2            lcddev.yoffset=0;
 383   2            LCD_WriteReg(0x36,0);//BGR==1,MY==0,MX==0,MV==0
 384   2          break;
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 8   

 385   2          case 1:
 386   2            lcddev.width=LCD_H;
 387   2            lcddev.height=LCD_W;
 388   2            lcddev.xoffset=0;
 389   2            lcddev.yoffset=0;
 390   2            LCD_WriteReg(0x36,(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 391   2          break;
 392   2          case 2:                 
 393   2            lcddev.width=LCD_W;
 394   2            lcddev.height=LCD_H;
 395   2            lcddev.xoffset=0;
 396   2            lcddev.yoffset=122;     
 397   2            LCD_WriteReg(0x36,(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 398   2          break;
 399   2          case 3:
 400   2            lcddev.width=LCD_H;
 401   2            lcddev.height=LCD_W;
 402   2            lcddev.xoffset=122;
 403   2            lcddev.yoffset=0;
 404   2            LCD_WriteReg(0x36,(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 405   2          break;  
 406   2          default:break;
 407   2        }   
 408   1      }  
 409          
 410          
 411          
 412          /*****************************************         TFT屏幕显示函数        ********************************
             -**************************/
 413          //在指定位置显示一个字符
 414          //x,y:起始坐标
 415          //num:要显示的字符:" "--->"~"
 416          //size:字体大小 12/16/24
 417          //mode:叠加方式(1)还是非叠加方式(0)
 418          void LCD_ShowChar(u8 x,u8 y,u8 num,u8 mode)
 419          {                 
 420   1        u8 temp,t1,t;
 421   1        u8 y0=y;  
 422   1        num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 423   1        for(t=0;t<(size/8+((size%8)?1:0))*(size/2);t++) //(size/8+((size%8)?1:0))*(size/2)://得到字体一个字符对应
             -点阵集所占的字节数  
 424   1        {   
 425   2          if(size==24)temp=ascii_2412[num][t];    //调用2412字体
 426   2          else return;                //没有的字库
 427   2          for(t1=0;t1<8;t1++)
 428   2          {         
 429   3            if(temp&0x80)LCD_DrawPoint(x,y,POINT_COLOR);
 430   3            else if(mode==0)LCD_DrawPoint(x,y);
*** WARNING C209 IN LINE 430 OF sys\led.c: '_LCD_DrawPoint': too few actual parameters
 431   3      
 432   3            temp<<=1;
 433   3            y++;
 434   3            if(y>=lcddev.height)return;   //超区域了
 435   3            if((y-y0)==size)
 436   3            {
 437   4              y=y0;
 438   4              x++;
 439   4              if(x>=lcddev.width)return;  //超区域了
 440   4              break;
 441   4            }
 442   3          }    
 443   2        }                 
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 9   

 444   1      }   
 445          
 446          //显示字符串
 447          //x,y:起点坐标
 448          //width,height:区域大小  
 449          //size:字体大小
 450          //*p:字符串起始地址     
 451          void LCD_ShowString(u8 x,u8 y,u16 width,u16 height,u8 *p)
 452          {         
 453   1        u8 x0=x;
 454   1        width+=x;
 455   1        height+=y;
 456   1          while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 457   1          {    
 458   2              if(x>=width){x=x0;y+=size;}
 459   2              if(y>=height)break;//退出
 460   2              LCD_ShowChar(x,y,*p,1);
 461   2              x+=size/2;
 462   2              p++;
 463   2          }  
 464   1      }
 465          
 466          //在指定区域内填充单个颜色
 467          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
 468          //color:要填充的颜色
 469          void LCD_Fill(u8 sx,u8 sy,u8 ex,u8 ey,u16 color)
 470          {   
 471   1        u8 i,j;       
 472   1        LCD_SetWindows(sx,sy,ex,ey);//设置显示窗口
 473   1        for(i=0;i<(ey-sy+1);i++)  //得到填充的高度
 474   1        {
 475   2          for(j=0;j<(ex-sx+1);j++) //得到填充的宽度
 476   2          LCD_WR_DATA_16Bit(color); //写入数据   
 477   2        }
 478   1        LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//恢复窗口设置为全屏
 479   1      }
 480          
 481          //在指定位置画一个指定大小的圆
 482          //(x,y):中心点
 483          //r    :半径
 484          void Draw_Circle(u8 x0,u8 y0,u8 r,u16 color)
 485          {
 486   1        u8 a=0,b=r;
 487   1        int di;   
 488   1        di=3-(r<<1);             //判断下个点位置的标志
 489   1        while(a<=b)
 490   1        {
 491   2          LCD_DrawPoint(x0+a,y0-b,color);             //5
 492   2          LCD_DrawPoint(x0+b,y0-a,color);             //0           
 493   2          LCD_DrawPoint(x0+b,y0+a,color);             //4               
 494   2          LCD_DrawPoint(x0+a,y0+b,color);             //6 
 495   2          LCD_DrawPoint(x0-a,y0+b,color);             //1       
 496   2          LCD_DrawPoint(x0-b,y0+a,color);             
 497   2          LCD_DrawPoint(x0-a,y0-b,color);             //2             
 498   2          LCD_DrawPoint(x0-b,y0-a,color);             //7                
 499   2          a++;
 500   2          //使用Bresenham算法画圆     
 501   2          if(di<0)di +=4*a+6;   
 502   2          else
 503   2          {
 504   3            di+=10+4*(a-b);   
 505   3            b--;
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 10  

 506   3          }                 
 507   2        }
 508   1      } 
 509          
 510          //m^n函数
 511          //返回值:m^n次方.
 512          u16 LCD_Pow(u8 m,u8 n)
 513          {
 514   1        u16 result=1;  
 515   1        while(n--)result*=m;    
 516   1        return result;
 517   1      } 
 518          //显示数字,高位为0,则不显示
 519          //x,y :起点坐标  
 520          //len :数字的位数
 521          //size:字体大小
 522          //color:颜色 
 523          //num:数值(0~4294967295);  
 524          //显示数字,高位为0,则不显示
 525          //x,y :起点坐标  
 526          //len :数字的位数
 527          //size:字体大小
 528          //color:颜色 
 529          //num:数值(0~4294967295);  
 530          void LCD_ShowNum(u8 x,u8 y,u16 num,u8 len)
 531          {           
 532   1        u8 t,temp;
 533   1        u8 enshow=0;               
 534   1        for(t=0;t<len;t++)
 535   1        {
 536   2          temp=(num/LCD_Pow(10,len-t-1))%10;
 537   2          if(enshow==0&&t<(len-1))
 538   2          {
 539   3            if(temp==0)
 540   3            {
 541   4              LCD_ShowChar(x+(size/2)*t,y,' ',1);
 542   4              continue;
 543   4            }else enshow=1; 
 544   3             
 545   3          }
 546   2          LCD_ShowChar(x+(size/2)*t,y,temp+'0',1); 
 547   2        }
 548   1      }  
 549          
 550          
 551          ///*******************************************************************************
 552          //* 函数名 : LCD_DrawLine
 553          //* 函数功能 : 画一条直线
 554          //* 输入参数 : x1,y1:起点坐标，x2,y2:终点坐标
 555          //* 输出: 无
 556          //*******************************************************************************/
 557          void LCD_DrawLine(u8 x1, u8 y1, u8 x2, u8 y2,u16 color)
 558          {
 559   1        u16 t; 
 560   1        int xerr=0,yerr=0,delta_x,delta_y,distance; 
 561   1        int incx,incy,uRow,uCol; 
 562   1        delta_x=x2-x1; //计算坐标增量 
 563   1        delta_y=y2-y1; 
 564   1        uRow=x1; 
 565   1        uCol=y1; 
 566   1        if(delta_x>0)incx=1; //设置单步方向 
 567   1        else if(delta_x==0)incx=0;//垂直线 
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 11  

 568   1        else {incx=-1;delta_x=-delta_x;} 
 569   1        if(delta_y>0)incy=1; 
 570   1        else if(delta_y==0)incy=0;//水平线 
 571   1        else{incy=-1;delta_y=-delta_y;} 
 572   1        if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 573   1        else distance=delta_y; 
 574   1        for(t=0;t<=distance+1;t++ )//画线输出 
 575   1        {  
 576   2          LCD_DrawPoint(uRow,uCol,color);//画点 
 577   2          xerr+=delta_x ; 
 578   2          yerr+=delta_y ; 
 579   2          if(xerr>distance) 
 580   2          { 
 581   3            xerr-=distance; 
 582   3            uRow+=incx; 
 583   3          } 
 584   2          if(yerr>distance) 
 585   2          { 
 586   3            yerr-=distance; 
 587   3            uCol+=incy; 
 588   3          } 
 589   2        }  
 590   1      } 
 591          /****************************************************************************
 592          *函数名：LCD_ShowFontHZ
 593          *输  入：x：汉字显示的X坐标
 594          *      * y：汉字显示的Y坐标
 595          *      * cn：要显示的汉字
 596          *      * wordColor：文字的颜色
 597          *      * backColor：背景颜色
 598          *输  出：
 599          *功  能：写二号楷体汉字
 600          ****************************************************************************/
 601          void LCD_ShowFontHZ(u8 x, u8 y, u8 *cn)  
 602          {  
 603   1        u8 i, j, wordNum;
 604   1        u16 color;
 605   1        while (*cn != '\0')
 606   1        {
 607   2          LCD_SetWindows(x, y, x+23, y+23);
 608   2          for (wordNum=0; wordNum<5; wordNum++)
 609   2          { //wordNum扫描字库的字数
 610   3            if ((CnChar24x24[wordNum].Index[0]==*cn)
 611   3                 &&(CnChar24x24[wordNum].Index[1]==*(cn+1)))
 612   3            {
 613   4              for(i=0; i<72; i++) 
 614   4              { //MSK的位数
 615   5                color=CnChar24x24[wordNum].Msk[i];
 616   5                for(j=0;j<8;j++) 
 617   5                {
 618   6                  if((color&0x80)==0x80)
 619   6                  {
 620   7                    LCD_WR_DATA_16Bit(POINT_COLOR);             
 621   7                  }             
 622   6                  else
 623   6                  {
 624   7                    LCD_WR_DATA_16Bit(BACK_COLOR); 
 625   7                  } 
 626   6                  color<<=1;
 627   6                }//for(j=0;j<8;j++)结束
 628   5              }    
 629   4            }
C51 COMPILER V9.60.7.0   LED                                                               09/06/2024 17:11:43 PAGE 12  

 630   3          } //for (wordNum=0; wordNum<20; wordNum++)结束  
 631   2          cn += 2;
 632   2          x += 24;
 633   2        }
 634   1      }
 635          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2107    ----
   CONSTANT SIZE    =   1342    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     18      86
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
